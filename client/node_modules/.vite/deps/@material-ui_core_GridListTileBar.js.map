{
  "version": 3,
  "sources": ["../../@material-ui/core/esm/GridListTileBar/GridListTileBar.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      height: 48,\n      background: 'rgba(0, 0, 0, 0.5)',\n      display: 'flex',\n      alignItems: 'center',\n      fontFamily: theme.typography.fontFamily\n    },\n\n    /* Styles applied to the root element if `titlePosition=\"bottom\"`. */\n    titlePositionBottom: {\n      bottom: 0\n    },\n\n    /* Styles applied to the root element if `titlePosition=\"top\"`. */\n    titlePositionTop: {\n      top: 0\n    },\n\n    /* Styles applied to the root element if a `subtitle` is provided. */\n    rootSubtitle: {\n      height: 68\n    },\n\n    /* Styles applied to the title and subtitle container element. */\n    titleWrap: {\n      flexGrow: 1,\n      marginLeft: 16,\n      marginRight: 16,\n      color: theme.palette.common.white,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the container element if `actionPosition=\"left\"`. */\n    titleWrapActionPosLeft: {\n      marginLeft: 0\n    },\n\n    /* Styles applied to the container element if `actionPosition=\"right\"`. */\n    titleWrapActionPosRight: {\n      marginRight: 0\n    },\n\n    /* Styles applied to the title container element. */\n    title: {\n      fontSize: theme.typography.pxToRem(16),\n      lineHeight: '24px',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the subtitle container element. */\n    subtitle: {\n      fontSize: theme.typography.pxToRem(12),\n      lineHeight: 1,\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the actionIcon if supplied. */\n    actionIcon: {},\n\n    /* Styles applied to the actionIcon if `actionPosition=\"left\"`. */\n    actionIconActionPosLeft: {\n      order: -1\n    }\n  };\n};\nvar warnedOnce = false;\n/**\n * ⚠️ The GridListTileBar component was renamed to ImageListItemBar to align with the current Material Design naming.\n *\n * You should use `import { ImageListItemBar } from '@material-ui/core'`\n * or `import ImageListItemBar from '@material-ui/core/ImageListItemBar'`.\n */\n\nvar GridListTileBar = /*#__PURE__*/React.forwardRef(function GridListTileBar(props, ref) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce) {\n      warnedOnce = true;\n      console.error(['Material-UI: The GridListTileBar component was renamed to ImageListItemBar to align with the current Material Design naming.', '', \"You should use `import { ImageListItemBar } from '@material-ui/core'`\", \"or `import ImageListItemBar from '@material-ui/core/ImageListItemBar'`.\"].join('\\n'));\n    }\n  }\n\n  var actionIcon = props.actionIcon,\n      _props$actionPosition = props.actionPosition,\n      actionPosition = _props$actionPosition === void 0 ? 'right' : _props$actionPosition,\n      classes = props.classes,\n      className = props.className,\n      subtitle = props.subtitle,\n      title = props.title,\n      _props$titlePosition = props.titlePosition,\n      titlePosition = _props$titlePosition === void 0 ? 'bottom' : _props$titlePosition,\n      other = _objectWithoutProperties(props, [\"actionIcon\", \"actionPosition\", \"classes\", \"className\", \"subtitle\", \"title\", \"titlePosition\"]);\n\n  var actionPos = actionIcon && actionPosition;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, titlePosition === 'top' ? classes.titlePositionTop : classes.titlePositionBottom, subtitle && classes.rootSubtitle),\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.titleWrap, {\n      'left': classes.titleWrapActionPosLeft,\n      'right': classes.titleWrapActionPosRight\n    }[actionPos])\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.title\n  }, title), subtitle ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.subtitle\n  }, subtitle) : null), actionIcon ? /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.actionIcon, actionPos === 'left' && classes.actionIconActionPosLeft)\n  }, actionIcon) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? GridListTileBar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * An IconButton element to be used as secondary action target\n   * (primary action target is the tile itself).\n   */\n  actionIcon: PropTypes.node,\n\n  /**\n   * Position of secondary action IconButton.\n   */\n  actionPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * String or element serving as subtitle (support text).\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Title to be displayed on tile.\n   */\n  title: PropTypes.node,\n\n  /**\n   * Position of the title bar.\n   */\n  titlePosition: PropTypes.oneOf(['bottom', 'top'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiGridListTileBar'\n})(GridListTileBar);"],
  "mappings": "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",
  "names": ["styles", "GridListTileBar", "PropTypes"]
}
