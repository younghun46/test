import {
  createSvgIcon,
  init_createSvgIcon
} from "./chunk-TTMOCHWH.js";
import "./chunk-KSGI4E4R.js";
import {
  init_withStyles,
  withStyles_default
} from "./chunk-MJV5XCBG.js";
import {
  _objectWithoutProperties,
  chainPropTypes,
  clsx_m_default,
  init_clsx_m,
  init_esm,
  init_objectWithoutProperties
} from "./chunk-EBZLRUIJ.js";
import {
  _extends,
  init_extends
} from "./chunk-B2ZQ5MHT.js";
import {
  require_prop_types
} from "./chunk-SRDREKJA.js";
import "./chunk-AAY5IJNO.js";
import {
  require_react
} from "./chunk-IWY24JH5.js";
import "./chunk-5IM2W4UW.js";
import "./chunk-O37IYKPJ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@material-ui/core/esm/Avatar/Avatar.js
init_extends();
init_objectWithoutProperties();
var React2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_withStyles();

// node_modules/@material-ui/core/esm/internal/svg-icons/Person.js
var React = __toESM(require_react());
init_createSvgIcon();
var Person_default = createSvgIcon(React.createElement("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
}), "Person");

// node_modules/@material-ui/core/esm/Avatar/Avatar.js
var styles = function styles2(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      position: "relative",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0,
      width: 40,
      height: 40,
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(20),
      lineHeight: 1,
      borderRadius: "50%",
      overflow: "hidden",
      userSelect: "none"
    },
    /* Styles applied to the root element if not `src` or `srcSet`. */
    colorDefault: {
      color: theme.palette.background.default,
      backgroundColor: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[600]
    },
    /* Styles applied to the root element if `variant="circle"`. */
    circle: {},
    /* Styles applied to the root element if `variant="circular"`. */
    circular: {},
    /* Styles applied to the root element if `variant="rounded"`. */
    rounded: {
      borderRadius: theme.shape.borderRadius
    },
    /* Styles applied to the root element if `variant="square"`. */
    square: {
      borderRadius: 0
    },
    /* Styles applied to the img element if either `src` or `srcSet` is defined. */
    img: {
      width: "100%",
      height: "100%",
      textAlign: "center",
      // Handle non-square image. The property isn't supported by IE 11.
      objectFit: "cover",
      // Hide alt text.
      color: "transparent",
      // Hide the image broken icon, only works on Chrome.
      textIndent: 1e4
    },
    /* Styles applied to the fallback icon */
    fallback: {
      width: "75%",
      height: "75%"
    }
  };
};
function useLoaded(_ref) {
  var src = _ref.src, srcSet = _ref.srcSet;
  var _React$useState = React2.useState(false), loaded = _React$useState[0], setLoaded = _React$useState[1];
  React2.useEffect(function() {
    if (!src && !srcSet) {
      return void 0;
    }
    setLoaded(false);
    var active = true;
    var image = new Image();
    image.src = src;
    image.srcSet = srcSet;
    image.onload = function() {
      if (!active) {
        return;
      }
      setLoaded("loaded");
    };
    image.onerror = function() {
      if (!active) {
        return;
      }
      setLoaded("error");
    };
    return function() {
      active = false;
    };
  }, [src, srcSet]);
  return loaded;
}
var Avatar = React2.forwardRef(function Avatar2(props, ref) {
  var alt = props.alt, childrenProp = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? "div" : _props$component, imgProps = props.imgProps, sizes = props.sizes, src = props.src, srcSet = props.srcSet, _props$variant = props.variant, variant = _props$variant === void 0 ? "circular" : _props$variant, other = _objectWithoutProperties(props, ["alt", "children", "classes", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"]);
  var children = null;
  var loaded = useLoaded({
    src,
    srcSet
  });
  var hasImg = src || srcSet;
  var hasImgNotFailing = hasImg && loaded !== "error";
  if (hasImgNotFailing) {
    children = React2.createElement("img", _extends({
      alt,
      src,
      srcSet,
      sizes,
      className: classes.img
    }, imgProps));
  } else if (childrenProp != null) {
    children = childrenProp;
  } else if (hasImg && alt) {
    children = alt[0];
  } else {
    children = React2.createElement(Person_default, {
      className: classes.fallback
    });
  }
  return React2.createElement(Component, _extends({
    className: clsx_m_default(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),
    ref
  }, other), children);
});
true ? Avatar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Used in combination with `src` or `srcSet` to
   * provide an alt attribute for the rendered `img` element.
   */
  alt: import_prop_types.default.string,
  /**
   * Used to render icon or text elements inside the Avatar if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: chainPropTypes(import_prop_types.default.object, function(props) {
    var classes = props.classes;
    if (classes == null) {
      return null;
    }
    if (classes.circle != null && // 2 classnames? one from withStyles the other must be custom
    classes.circle.split(" ").length > 1) {
      throw new Error("Material-UI: The `circle` class is deprecated. Use `circular` instead.");
    }
    return null;
  }),
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * Attributes applied to the `img` element if the component is used to display an image.
   * It can be used to listen for the loading error event.
   */
  imgProps: import_prop_types.default.object,
  /**
   * The `sizes` attribute for the `img` element.
   */
  sizes: import_prop_types.default.string,
  /**
   * The `src` attribute for the `img` element.
   */
  src: import_prop_types.default.string,
  /**
   * The `srcSet` attribute for the `img` element.
   * Use this attribute for responsive image display.
   */
  srcSet: import_prop_types.default.string,
  /**
   * The shape of the avatar.
   */
  variant: chainPropTypes(import_prop_types.default.oneOf(["circle", "circular", "rounded", "square"]), function(props) {
    var variant = props.variant;
    if (variant === "circle") {
      throw new Error('Material-UI: `variant="circle"` is deprecated. Use `variant="circular"` instead.');
    }
    return null;
  })
} : void 0;
var Avatar_default = withStyles_default(styles, {
  name: "MuiAvatar"
})(Avatar);
export {
  Avatar_default as default
};
//# sourceMappingURL=@material-ui_core_Avatar.js.map
