{
  "version": 3,
  "sources": ["../../@material-ui/core/esm/FormControlLabel/FormControlLabel.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport { useFormControl } from '../FormControl';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n      // For correct alignment with the text.\n      verticalAlign: 'middle',\n      WebkitTapHighlightColor: 'transparent',\n      marginLeft: -11,\n      marginRight: 16,\n      // used for row presentation of radio/checkbox\n      '&$disabled': {\n        cursor: 'default'\n      }\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"start\"`. */\n    labelPlacementStart: {\n      flexDirection: 'row-reverse',\n      marginLeft: 16,\n      // used for row presentation of radio/checkbox\n      marginRight: -11\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"top\"`. */\n    labelPlacementTop: {\n      flexDirection: 'column-reverse',\n      marginLeft: 16\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"bottom\"`. */\n    labelPlacementBottom: {\n      flexDirection: 'column',\n      marginLeft: 16\n    },\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the label's Typography component. */\n    label: {\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      }\n    }\n  };\n};\n/**\n * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\n\nvar FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(props, ref) {\n  var checked = props.checked,\n      classes = props.classes,\n      className = props.className,\n      control = props.control,\n      disabledProp = props.disabled,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$labelPlacement = props.labelPlacement,\n      labelPlacement = _props$labelPlacement === void 0 ? 'end' : _props$labelPlacement,\n      name = props.name,\n      onChange = props.onChange,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"checked\", \"classes\", \"className\", \"control\", \"disabled\", \"inputRef\", \"label\", \"labelPlacement\", \"name\", \"onChange\", \"value\"]);\n\n  var muiFormControl = useFormControl();\n  var disabled = disabledProp;\n\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n\n  var controlProps = {\n    disabled: disabled\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"label\", _extends({\n    className: clsx(classes.root, className, labelPlacement !== 'end' && classes[\"labelPlacement\".concat(capitalize(labelPlacement))], disabled && classes.disabled),\n    ref: ref\n  }, other), /*#__PURE__*/React.cloneElement(control, controlProps), /*#__PURE__*/React.createElement(Typography, {\n    component: \"span\",\n    className: clsx(classes.label, disabled && classes.disabled)\n  }, label));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n\n  /**\n   * If `true`, the control will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The text to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The position of the label.\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControlLabel'\n})(FormControlLabel);"],
  "mappings": "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",
  "names": ["styles", "FormControlLabel", "PropTypes"]
}
