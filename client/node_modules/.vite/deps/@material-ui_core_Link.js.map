{
  "version": 3,
  "sources": ["../../@material-ui/core/esm/Link/Link.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nvar Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisible = _useIsFocusVisible.isFocusVisible,\n      onBlurVisible = _useIsFocusVisible.onBlurVisible,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState = React.useState(false),\n      focusVisible = _React$useState[0],\n      setFocusVisible = _React$useState[1];\n\n  var handlerRef = useForkRef(ref, focusVisibleRef);\n\n  var handleBlur = function handleBlur(event) {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[\"underline\".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);"],
  "mappings": "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",
  "names": ["Link", "handleBlur", "handleFocus", "PropTypes"]
}
